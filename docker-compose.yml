services:
  abmciweb:
    build: .
    container_name: abmciweb
    command: gunicorn abmci.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "1108:8000"
    env_file:
      - .env
    depends_on:
      abmcidb:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped

  abmcidb:
    image: postgis/postgis:16-3.4
    container_name: abmcidb
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 8
    restart: unless-stopped
    networks:
      - abmci-network

  redis:
    image: redis:7
    container_name: abmciredis
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped

  celery:
    build: .
    container_name: abmcicelery
    command: celery -A abmci worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      abmcidb:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    restart: unless-stopped

  celery-beat:
    build: .
    container_name: abmcicelerybeat
    command: celery -A abmci beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      abmcidb:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: abmciprometheus
    volumes:
      - ./monitoring:/etc/prometheus:ro
    ports:
      - "9098:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: abmcigrafana
    ports:
      - "3008:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

  adminer:
    image: adminer
    container_name: abmci-adminer
    restart: unless-stopped
    ports:
      - "1208:8080"

volumes:
  postgres_data:
  static_volume:
  media_volume:
  grafana_data:

networks:
  abmci-network: